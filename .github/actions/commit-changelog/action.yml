name: 'Generate commit-based changelog'
description: 'Generates changelog from commits, extracting PR descriptions'
inputs:
  fromTag:
    description: '–¢—ç–≥, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –∏–ª–∏ —Ö—ç—à –∫–æ–º–º–∏—Ç–∞'
    required: true
  toTag:
    description: '–¢—ç–≥, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –∏–ª–∏ —Ö—ç—à –∫–æ–º–º–∏—Ç–∞'
    required: true
outputs:
  changelog:
    description: "Generated changelog"
    value: ${{ steps.changelog.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Compute envs
      shell: bash
      run: |
        FROM_TAG="${{ inputs.fromTag }}"
        TO_TAG="${{ inputs.toTag }}"

        echo "FROM_TAG=$FROM_TAG" >> $GITHUB_ENV
        echo "TO_TAG=$TO_TAG" >> $GITHUB_ENV
        echo "FROM_TAG = $FROM_TAG and TO_TAG = $TO_TAG"

    - name: Generate changelog from PR descriptions
      id: changelog
      shell: bash
      run: |
        echo "üîç Generating changelog from PR descriptions between ${{ env.FROM_TAG }} and ${{ env.TO_TAG }}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
        COMMITS=$(git log --pretty=format:"%h|%s" ${{ env.FROM_TAG }}..${{ env.TO_TAG }})
        
        if [ -z "$COMMITS" ]; then
          echo "No commits found between ${{ env.FROM_TAG }} and ${{ env.TO_TAG }}"
          echo "changelog=No changes found in this release." >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "üîç Found commits: $(echo "$COMMITS" | wc -l)"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º changelog
        CHANGELOG=""
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ PR —Å PLASMA –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
        echo "üîç Searching for PRs with PLASMA in title..."
        PLASMA_PRS=$(gh pr list --state merged --search "PLASMA" --json number,title,body --jq '.[] | select(.title | contains("PLASMA")) | {number, title, body}' 2>/dev/null || echo "[]")
        
        if [ "$PLASMA_PRS" != "[]" ] && [ -n "$PLASMA_PRS" ]; then
          echo "üîç Found PRs with PLASMA:"
          echo "$PLASMA_PRS" | jq -r '.number + ": " + .title' 2>/dev/null || echo "Found PRs but couldn't parse"
          
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π PR
          echo "$PLASMA_PRS" | jq -r '.number' 2>/dev/null | while read -r PR_NUMBER; do
            if [ -n "$PR_NUMBER" ]; then
              echo "üîç Processing PR: $PR_NUMBER"
              
              # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ PR
              PR_BODY=$(echo "$PLASMA_PRS" | jq -r 'select(.number == '$PR_NUMBER') | .body // ""' 2>/dev/null || echo "")
              
              if [ -n "$PR_BODY" ] && [ "$PR_BODY" != "null" ]; then
                echo "üîç Extracting component descriptions from PR $PR_NUMBER"
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (H2 –∏ H3 –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                COMPONENT_DESCRIPTIONS=$(echo "$PR_BODY" | grep -E "^###|^##" | head -20)
                
                if [ -n "$COMPONENT_DESCRIPTIONS" ]; then
                  echo "üîç Found component descriptions: $(echo "$COMPONENT_DESCRIPTIONS" | wc -l) lines"
                  CHANGELOG="$CHANGELOG$COMPONENT_DESCRIPTIONS\n\n"
                else
                  # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ PR
                  PR_TITLE=$(echo "$PLASMA_PRS" | jq -r 'select(.number == '$PR_NUMBER') | .title // ""' 2>/dev/null || echo "")
                  CHANGELOG="$CHANGELOG- $PR_TITLE (#$PR_NUMBER)\n"
                fi
              else
                echo "üîç No PR body found for PR $PR_NUMBER"
              fi
            fi
          done
        else
          echo "üîç No PRs with PLASMA found"
        fi
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="No changes found in this release."
        fi
        
        echo "Generated changelog:"
        echo "$CHANGELOG"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT