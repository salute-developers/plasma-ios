name: 'Generate commit-based changelog'
description: 'Generate changelog from commits instead of PRs'
inputs:
  fromTag:
    description: 'From tag or commit'
    required: false
  toTag:
    description: 'To tag or commit'
    required: false
outputs:
  changelog:
    description: "Generated changelog"
    value: ${{ steps.changelog.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Compute envs
      shell: bash
      run: |
        if [ -z "${{ inputs.fromTag }}" ]; then
          FROM_TAG=$(git tag --sort=-creatordate | grep '^release-' | sed -n '1p')
        else
          FROM_TAG="${{ inputs.fromTag }}"
        fi

        if [ -z "${{ inputs.toTag }}" ]; then
          TO_TAG="HEAD"
        else
          TO_TAG="${{ inputs.toTag }}"
        fi

        echo "FROM_TAG=$FROM_TAG" >> $GITHUB_ENV
        echo "TO_TAG=$TO_TAG" >> $GITHUB_ENV
        echo "FROM_TAG = $FROM_TAG and TO_TAG = $TO_TAG"

    - name: Generate changelog from PR descriptions
      id: changelog
      shell: bash
      run: |
        echo "üîç Generating changelog from PR descriptions between ${{ env.FROM_TAG }} and ${{ env.TO_TAG }}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
        echo "üîç Getting commits between ${{ env.FROM_TAG }} and ${{ env.TO_TAG }}"
        COMMITS=$(git log --pretty=format:"%h|%s" ${{ env.FROM_TAG }}..${{ env.TO_TAG }})
        
        if [ -z "$COMMITS" ]; then
          echo "No commits found between ${{ env.FROM_TAG }} and ${{ env.TO_TAG }}"
          echo "changelog=No changes found in this release." >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "üîç Found commits: $(echo "$COMMITS" | wc -l)"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º changelog
        CHANGELOG=""
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–∏—Ç—ã —Å PLASMA-–Ω–æ–º–µ—Ä–æ–º
        while IFS='|' read -r hash message; do
          if [ -z "$hash" ]; then
            continue
          fi
          
          echo "üîç Processing commit: $hash - $message"
          
          # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã
          if echo "$message" | grep -qiE "^(chore|bump|version|release|fix:.*changelog|simplify|feat:.*changelog)"; then
            echo "üîç Skipping service commit: $message"
            continue
          fi
          
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
          set +e
          
          # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º PR –ø–æ —Ö–µ—à—É –∫–æ–º–º–∏—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
          echo "üîç Searching for PR by commit hash: $hash"
          PR_NUMBER=$(gh pr list --state merged --json number,body --jq '.[] | select(.body | contains("'$hash'")) | .number' 2>/dev/null | head -1 || echo "")
          echo "üîç Found PR number by hash: $PR_NUMBER"
          
          # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ö–µ—à—É, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ PLASMA-–Ω–æ–º–µ—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞
          if [ -z "$PR_NUMBER" ]; then
            PLASMA_NUMBER=$(echo "$message" | grep -o "PLASMA-[0-9]+" | head -1)
            if [ -n "$PLASMA_NUMBER" ]; then
              echo "üîç Found PLASMA number in commit: $PLASMA_NUMBER"
              PR_NUMBER=$(gh pr list --state merged --search "$PLASMA_NUMBER" --json number,title --jq '.[0].number // empty' 2>/dev/null || echo "")
              echo "üîç Found PR number by PLASMA: $PR_NUMBER"
            fi
          fi
          
          # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
          if [ -z "$PR_NUMBER" ]; then
            echo "üîç Searching by commit message keywords"
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
            KEYWORDS=$(echo "$message" | grep -oE "(feat|fix|add|implement|update|change|ButtonGroup|NotificationContent)" | head -1)
            if [ -n "$KEYWORDS" ]; then
              echo "üîç Searching for PR with keywords: $KEYWORDS"
              PR_NUMBER=$(gh pr list --state merged --search "$KEYWORDS" --json number,title --jq '.[] | select(.title | contains("'$KEYWORDS'")) | .number' 2>/dev/null | head -1 || echo "")
              echo "üîç Found PR number by keywords: $PR_NUMBER"
            fi
          fi
          
          if [ -n "$PR_NUMBER" ]; then
            echo "üîç Found PR: $PR_NUMBER"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ PR
            PR_BODY=$(gh pr view $PR_NUMBER --json body --jq '.body // ""' 2>/dev/null || echo "")
            
            if [ -n "$PR_BODY" ] && [ "$PR_BODY" != "null" ]; then
              echo "üîç Extracting component descriptions from PR $PR_NUMBER"
              # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (H2 –∏ H3 –∑–∞–≥–æ–ª–æ–≤–∫–∏)
              COMPONENT_DESCRIPTIONS=$(echo "$PR_BODY" | grep -E "^###|^##" | head -20)
              
              if [ -n "$COMPONENT_DESCRIPTIONS" ]; then
                echo "üîç Found component descriptions: $(echo "$COMPONENT_DESCRIPTIONS" | wc -l) lines"
                CHANGELOG="$CHANGELOG$COMPONENT_DESCRIPTIONS\n\n"
              else
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ PR
                PR_TITLE=$(gh pr view $PR_NUMBER --json title --jq '.title // ""' 2>/dev/null || echo "")
                CHANGELOG="$CHANGELOG- $PR_TITLE (#$PR_NUMBER)\n"
              fi
            else
              echo "üîç No PR body found, using commit message"
              SAFE_MESSAGE=$(echo "$message" | sed 's/\\/\\\\/g' | sed 's/\n/\\n/g')
              CHANGELOG="$CHANGELOG- $SAFE_MESSAGE ($hash)\n"
            fi
          else
            echo "üîç No PR found, using commit message"
            SAFE_MESSAGE=$(echo "$message" | sed 's/\\/\\\\/g' | sed 's/\n/\\n/g')
            CHANGELOG="$CHANGELOG- $SAFE_MESSAGE ($hash)\n"
          fi
          
          # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ
          set -e
          
        done <<< "$COMMITS"
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="No changes found in this release."
        fi
        
        echo "Generated changelog:"
        echo "$CHANGELOG"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT