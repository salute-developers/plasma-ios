name: 'Generate commit-based changelog'
description: 'Generate changelog from commits instead of PRs'
inputs:
  fromTag:
    description: 'From tag or commit'
    required: false
  toTag:
    description: 'To tag or commit'
    required: false
outputs:
  changelog:
    description: "Generated changelog"
    value: ${{ steps.changelog.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Compute envs
      shell: bash
      run: |
        if [ -z "${{ inputs.fromTag }}" ]; then
          FROM_TAG=$(git tag --sort=-creatordate | grep '^release-' | sed -n '2p')
        else
          FROM_TAG="${{ inputs.fromTag }}"
        fi

        if [ -z "${{ inputs.toTag }}" ]; then
          TO_TAG=$(git tag --sort=-creatordate | grep '^release-' | sed -n '1p')
        else
          TO_TAG="${{ inputs.toTag }}"
        fi

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–º–∏—Ç—ã
        if [ -z "$FROM_TAG" ]; then
          FROM_TAG=$(git rev-parse HEAD~10)
        fi
        
        if [ -z "$TO_TAG" ]; then
          TO_TAG="HEAD"
        fi

        echo "FROM_TAG=$FROM_TAG" >> $GITHUB_ENV
        echo "TO_TAG=$TO_TAG" >> $GITHUB_ENV
        echo "FROM_TAG = $FROM_TAG and TO_TAG = $TO_TAG"

    - name: Generate changelog from commits
      id: changelog
      shell: bash
      run: |
        echo "üîç Generating changelog from commits between ${{ env.FROM_TAG }} and ${{ env.TO_TAG }}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
        COMMITS=$(git log --pretty=format:"%h %s" ${{ env.FROM_TAG }}..${{ env.TO_TAG }})
        
        if [ -z "$COMMITS" ]; then
          echo "No commits found between ${{ env.FROM_TAG }} and ${{ env.TO_TAG }}"
          echo "changelog=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        FEATURES=""
        FIXES=""
        IMPROVEMENTS=""
        DOCS=""
        OTHER=""
        
        while IFS= read -r line; do
          if [ -z "$line" ]; then
            continue
          fi
          
          HASH=$(echo "$line" | cut -d' ' -f1)
          MESSAGE=$(echo "$line" | cut -d' ' -f2-)
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞
          if echo "$MESSAGE" | grep -qiE "^(feat|feature)"; then
            FEATURES="$FEATURES- $MESSAGE ($HASH)\n"
          elif echo "$MESSAGE" | grep -qiE "^(fix|bug)"; then
            FIXES="$FIXES- $MESSAGE ($HASH)\n"
          elif echo "$MESSAGE" | grep -qiE "^(chore|improvement|refactor)"; then
            IMPROVEMENTS="$IMPROVEMENTS- $MESSAGE ($HASH)\n"
          elif echo "$MESSAGE" | grep -qiE "^(docs|doc)"; then
            DOCS="$DOCS- $MESSAGE ($HASH)\n"
          else
            OTHER="$OTHER- $MESSAGE ($HASH)\n"
          fi
        done <<< "$COMMITS"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º changelog
        CHANGELOG=""
        
        if [ -n "$FEATURES" ]; then
          CHANGELOG="$CHANGELOG## üöÄ Features\n\n$FEATURES\n"
        fi
        
        if [ -n "$FIXES" ]; then
          CHANGELOG="$CHANGELOG## üêõ Bug Fixes\n\n$FIXES\n"
        fi
        
        if [ -n "$IMPROVEMENTS" ]; then
          CHANGELOG="$CHANGELOG## üîß Improvements\n\n$IMPROVEMENTS\n"
        fi
        
        if [ -n "$DOCS" ]; then
          CHANGELOG="$CHANGELOG## üìö Documentation\n\n$DOCS\n"
        fi
        
        if [ -n "$OTHER" ]; then
          CHANGELOG="$CHANGELOG## üî® Other Changes\n\n$OTHER\n"
        fi
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="No changes found in this release."
        fi
        
        echo "Generated changelog:"
        echo "$CHANGELOG"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
