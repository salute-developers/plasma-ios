name: 'Generate Android-style changelog'
description: 'Generate changelog grouped by components like Android'
inputs:
  fromTag:
    description: 'From tag or commit'
    required: false
  toTag:
    description: 'To tag or commit'
    required: false
outputs:
  changelog:
    description: "Generated changelog"
    value: ${{ steps.changelog.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Compute envs
      shell: bash
      run: |
        if [ -z "${{ inputs.fromTag }}" ]; then
          FROM_TAG=$(git tag --sort=-creatordate | grep '^release-' | sed -n '1p')
        else
          FROM_TAG="${{ inputs.fromTag }}"
        fi

        if [ -z "${{ inputs.toTag }}" ]; then
          TO_TAG="HEAD"
        else
          TO_TAG="${{ inputs.toTag }}"
        fi

        echo "FROM_TAG=$FROM_TAG" >> $GITHUB_ENV
        echo "TO_TAG=$TO_TAG" >> $GITHUB_ENV
        echo "FROM_TAG = $FROM_TAG and TO_TAG = $TO_TAG"

    - name: Generate Android-style changelog
      id: changelog
      shell: bash
      run: |
        echo "üîç Generating Android-style changelog between ${{ env.FROM_TAG }} and ${{ env.TO_TAG }}"
        
        # –ü–æ–ª—É—á–∞–µ–º PR'—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
        PRS=$(gh pr list --state merged --base main --json number,title,labels,mergedAt | jq -r '.[] | select(.mergedAt != null) | "\(.number)|\(.title)|\(.labels | map(.name) | join(","))"')
        
        if [ -z "$PRS" ]; then
          echo "No merged PRs found"
          echo "changelog=No changes found in this release." >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º PR'—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        declare -A COMPONENTS
        declare -A THEMES
        
        while IFS='|' read -r number title labels; do
          # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º PR'—ã —Å –º–µ—Ç–∫–æ–π changelog-skip
          if echo "$labels" | grep -q "changelog-skip"; then
            continue
          fi
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ PR
          COMPONENT=""
          if echo "$title" | grep -qiE "(ButtonGroup|IconButtonGroup)"; then
            COMPONENT="ButtonGroup"
          elif echo "$title" | grep -qiE "(TextField|TextInput)"; then
            COMPONENT="TextField"
          elif echo "$title" | grep -qiE "(Button|BasicButton)"; then
            COMPONENT="Button"
          elif echo "$title" | grep -qiE "(Card|BasicCard)"; then
            COMPONENT="Card"
          elif echo "$title" | grep -qiE "(TabBar|Tab)"; then
            COMPONENT="TabBar"
          elif echo "$title" | grep -qiE "(CodeInput|Code)"; then
            COMPONENT="CodeInput"
          elif echo "$title" | grep -qiE "(Skeleton|SkeletonLoader)"; then
            COMPONENT="Skeleton"
          elif echo "$title" | grep -qiE "(Notification|NotificationContent)"; then
            COMPONENT="NotificationContent"
          elif echo "$title" | grep -qiE "(Drawer|DrawerLayout)"; then
            COMPONENT="Drawer"
          elif echo "$title" | grep -qiE "(Icons|Icon)"; then
            COMPONENT="Icons"
          elif echo "$title" | grep -qiE "(Theme|Tokens)"; then
            COMPONENT="Theme"
          elif echo "$title" | grep -qiE "(Core|Build|Chore)"; then
            COMPONENT="Core"
          fi
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É/–±–∏–±–ª–∏–æ—Ç–µ–∫—É
          THEME="SDDSComponents"
          if echo "$title" | grep -qiE "(SDDSIcons|Icons)"; then
            THEME="SDDSIcons"
          elif echo "$title" | grep -qiE "(SDDSTheme|Theme|Tokens)"; then
            THEME="SDDSTheme"
          elif echo "$title" | grep -qiE "(Core|Build|Chore)"; then
            THEME="Core"
          fi
          
          # –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          if [ -z "$COMPONENT" ]; then
            COMPONENT="Other"
          fi
          
          # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
          if [ -n "${COMPONENTS[$THEME:$COMPONENT]}" ]; then
            COMPONENTS[$THEME:$COMPONENT]="${COMPONENTS[$THEME:$COMPONENT]}- $title (#$number)\n"
          else
            COMPONENTS[$THEME:$COMPONENT]="- $title (#$number)\n"
          fi
          
          # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–º—ã
          THEMES[$THEME]=1
          
        done <<< "$PRS"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º changelog
        CHANGELOG=""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã
        for theme in $(printf '%s\n' "${!THEMES[@]}" | sort); do
          CHANGELOG="$CHANGELOG## $theme\n\n"
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
          declare -A THEME_COMPONENTS
          for key in "${!COMPONENTS[@]}"; do
            if [[ $key == $theme:* ]]; then
              component=${key#$theme:}
              THEME_COMPONENTS[$component]="${COMPONENTS[$key]}"
            fi
          done
          
          # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
          for component in $(printf '%s\n' "${!THEME_COMPONENTS[@]}" | sort); do
            CHANGELOG="$CHANGELOG### $component\n\n${THEME_COMPONENTS[$component]}\n"
          done
          
          CHANGELOG="$CHANGELOG\n"
        done
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="No changes found in this release."
        fi
        
        echo "Generated changelog:"
        echo "$CHANGELOG"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
