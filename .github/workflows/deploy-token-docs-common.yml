name: 'Deploy tokens docs common'

on:
  workflow_call:
    inputs:
      modules:
        type: string
        description: '–°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ json (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["styles-salute-theme", "sddsserv-theme", "plasma-b2c-theme", "plasma-home-ds-theme"]). –ï—Å–ª–∏ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º.'
        required: false
        default: '["styles-salute-theme", "sddsserv-theme", "plasma-b2c-theme", "plasma-home-ds-theme"]'
      ref:
        type: string
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏, —Ç—ç–≥–∞ –∏–ª–∏ —Ö—ç—à –∫–æ–º–º–∏—Ç–∞'
        required: true
      branch:
        type: string
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: false
      custom_deploy_path:
        type: string
        description: '–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–µ–ø–ª–æ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: test/custom/path/ –∏–ª–∏ experimental/ios/components/)'
        required: false

jobs:
  changelog:
    name: Prepare changelog
    runs-on: ubuntu-latest
    outputs:
      content: ${{ steps.build-changelog.outputs.changelog }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Build Changelog
        id: build-changelog
        uses: ./.github/actions/release-changelog
        with:
          toTag: ${{ inputs.ref }}
  deploy:
    name: Deploy docs
    needs: changelog
    runs-on: macos-latest
    environment: sdds
    if: inputs.ref != ''
    strategy:
      fail-fast: false
      matrix:
        module: 
          - sddsserv-theme
          - styles-salute-theme
          - plasma-b2c-theme
          - plasma-home-ds-theme
        include:
          - module: sddsserv-theme
            theme_name: sddsserv
          - module: styles-salute-theme
            theme_name: styles-salute
          - module: plasma-b2c-theme
            theme_name: plasma-b2c
          - module: plasma-home-ds-theme
            theme_name: plasma-homeds
    steps:
      - name: Check if module should be deployed
        id: check_module
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥—É–ª—å –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –¥–µ–ø–ª–æ—è
          modules='${{ inputs.modules }}'
          module='${{ matrix.module }}'
          
          # –ï—Å–ª–∏ modules –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          if [[ -z "$modules" || "$modules" == "" ]]; then
            modules='["styles-salute-theme", "sddsserv-theme", "plasma-b2c-theme", "plasma-home-ds-theme"]'
            echo "üîç Using default modules list: $modules"
          fi
          
          echo "üîç Debug info:"
          echo "  modules='$modules'"
          echo "  module='$module'"
          echo "  modules length: ${#modules}"
          echo "  module length: ${#module}"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞
          if echo "$modules" | grep -q "\"$module\"" || echo "$modules" | grep -q "'$module'" || echo "$modules" | grep -q "$module"; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Module '$module' found in modules list"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Module '$module' not found in modules list"
          fi
      
      - name: Checkout the code
        if: steps.check_module.outputs.should_deploy == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || inputs.ref }}

      - name: Create release-changelog.md
        if: steps.check_module.outputs.should_deploy == 'true'
        shell: bash
        run: |
          cat > "${{ github.workspace }}/release-changelog.md" <<EOF
          ${{ needs.changelog.outputs.content }}
          EOF

      - name: Set up Xcode
        if: steps.check_module.outputs.should_deploy == 'true'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'
          
      - name: Install the Apple certificate and provisioning profile
        if: steps.check_module.outputs.should_deploy == 'true'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          chmod +x ./scripts/install_certificate_and_profile.sh
          ./scripts/install_certificate_and_profile.sh "$RUNNER_TEMP" "$BUILD_CERTIFICATE_BASE64" "$P12_PASSWORD" "$BUILD_PROVISION_PROFILE_BASE64" "$KEYCHAIN_PASSWORD"

      - name: Extract branch name
        if: steps.check_module.outputs.should_deploy == 'true'
        id: extract_branch
        shell: bash
        run: |
          if [[ -n "${{ inputs.branch }}" ]]; then
            echo "branch=${{ inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.check_module.outputs.should_deploy == 'true'
        run: |
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js –∏ Yarn —á–µ—Ä–µ–∑ Homebrew
          brew install node yarn jq s3cmd

      - name: Run deploy and collect result
        if: steps.check_module.outputs.should_deploy == 'true'
        id: deploy
        env:
          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          ARTIFACT_ID: ":tokens:${{ matrix.module }}"
          VERSION_INPUT: ${{ inputs.ref }}
          BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}
          TARGET_TYPE: swiftui
          THEME_NAME: ${{ matrix.theme_name }}
          DOCS_URL: https://plasma.sberdevices.ru
        run: |
          cd docusaurus
          
          # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
          echo "üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
          echo "  S3_ACCESS_KEY_ID: '${S3_ACCESS_KEY_ID:0:3}***' (–¥–ª–∏–Ω–∞: ${#S3_ACCESS_KEY_ID})"
          echo "  S3_SECRET_ACCESS_KEY: '${S3_SECRET_ACCESS_KEY:0:3}***' (–¥–ª–∏–Ω–∞: ${#S3_SECRET_ACCESS_KEY})"
          echo "  S3_ENDPOINT: '$S3_ENDPOINT' (–¥–ª–∏–Ω–∞: ${#S3_ENDPOINT})"
          echo "  S3_REGION: '$S3_REGION' (–¥–ª–∏–Ω–∞: ${#S3_REGION})"
          echo "  S3_BUCKET: '$S3_BUCKET' (–¥–ª–∏–Ω–∞: ${#S3_BUCKET})"
          
          # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–µ–ø–ª–æ—è —Å S3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
          DEPLOY_CMD="./deploy.sh --s3 \"$ARTIFACT_ID\" \"$VERSION\" \"$BRANCH_NAME\" \"$TARGET_TYPE\" \"$THEME_NAME\" \"$CODE_REFERENCE\" \"$DOCS_URL\" \"$S3_ACCESS_KEY_ID\" \"$S3_SECRET_ACCESS_KEY\" \"$S3_ENDPOINT\" \"$S3_REGION\" \"$S3_BUCKET\""
          
          # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å –¥–µ–ø–ª–æ—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
          if [[ -n "${{ inputs.custom_deploy_path }}" ]]; then
            DEPLOY_CMD="./deploy.sh --s3 \"$ARTIFACT_ID\" \"$VERSION\" \"$BRANCH_NAME\" \"$TARGET_TYPE\" \"$THEME_NAME\" \"$CODE_REFERENCE\" \"$DOCS_URL\" \"$S3_ACCESS_KEY_ID\" \"$S3_SECRET_ACCESS_KEY\" \"$S3_ENDPOINT\" \"$S3_REGION\" \"$S3_BUCKET\" --deploy-path=\"${{ inputs.custom_deploy_path }}\""
          fi
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
          echo "üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: $DEPLOY_CMD"
          echo "üîç S3 –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã"
          eval $DEPLOY_CMD
          