name: 'Deploy tokens docs common'

on:
  workflow_call:
    inputs:
      modules:
        type: string
        description: 'Список модулей в формате json (например, [":tokens:styles-salute-theme", ":tokens:sddsserv-theme", ":tokens:plasma-b2c-theme", ":tokens:plasma-home-ds-theme"])'
        required: true
      ref:
        type: string
        description: 'Название ветки, тэга или хэш коммита'
        required: true
      theme_name:
        type: string
        description: 'Название темы для документации'
        required: false
        default: 'plasma-homeds'

jobs:
  changelog:
    name: Prepare changelog
    runs-on: ubuntu-latest
    outputs:
      content: ${{ steps.build-changelog.outputs.changelog }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Build Changelog
        id: build-changelog
        uses: ./.github/actions/release-changelog
        with:
          toTag: ${{ inputs.ref }}
  deploy:
    name: Deploy docs
    needs: changelog
    runs-on: ubuntu-latest
    if: inputs.modules != '' && inputs.modules != '[]' && inputs.ref != ''
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(inputs.modules) }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Create release-changelog.md
        shell: bash
        run: |
          cat > "${{ github.workspace }}/tokens/release-changelog.md" <<EOF
          ${{ needs.changelog.outputs.content }}
          EOF

      - name: Install s3cmd
        run: |
          sudo apt-get update
          sudo apt-get install -y s3cmd

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'
          
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          chmod +x ./scripts/install_certificate_and_profile.sh
          ./scripts/install_certificate_and_profile.sh "$RUNNER_TEMP" "$BUILD_CERTIFICATE_BASE64" "$P12_PASSWORD" "$BUILD_PROVISION_PROFILE_BASE64" "$KEYCHAIN_PASSWORD"

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          # Устанавливаем Node.js и Yarn
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm install -g yarn
          
          # Устанавливаем jq для работы с JSON
          sudo apt-get install -y jq
          
          # Устанавливаем s3cmd
          sudo apt-get install -y s3cmd

      - name: Run deploy and collect result
        id: deploy
        env:
          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          ARTIFACT_ID: ${{ matrix.module }}
          VERSION: ${{ inputs.ref }}
          BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}
          TARGET_TYPE: swiftui
          THEME_NAME: ${{ inputs.theme_name }}
          DOCS_URL: https://plasma.sberdevices.ru
        run: |
          # Генерируем документацию
          ./docusaurus/scripts/docusaurus-generate.sh
          
          # Собираем документацию
          ./docusaurus/scripts/docusaurus-build.sh
          
          # Обновляем список версий
          ./docusaurus/scripts/docusaurus-bump.sh
          
          # Деплоим документацию
          ./docusaurus/scripts/docusaurus-deploy.sh

      - name: Prepare deploy artifacts
        if: success()
        shell: bash
        run: |
          module="${{ matrix.module }}"
          module="${module#:}"
          safe_path="${module//:/\/}"
          artifact_name="docusaurus-${module//:/_}-result"
          mkdir -p artifacts/$safe_path
          cp build/generated/docusaurus/deploy.json artifacts/$safe_path/deploy.json
          echo "Uploading $artifact_name from artifacts/$safe_path"
          echo "ARTIFACT_NAME=$artifact_name" >> $GITHUB_ENV

      - name: Upload deploy result
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifacts/