#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π –≤ .xcodeproj —Ñ–∞–π–ª–∞—Ö
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/bump-versions.sh [patch|minor|major] [changed_modules]
# –ü—Ä–∏–º–µ—Ä: ./scripts/bump-versions.sh minor "SDDSComponents Themes/PlasmaB2CTheme"

set -e

BUMP_TYPE=${1:-minor}
CHANGED_MODULES=${2:-""}

echo "Bumping versions with type: $BUMP_TYPE"
echo "Changed modules: $CHANGED_MODULES"
echo "OS Type: $OSTYPE"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
bump_version() {
    local current_version=$1
    local bump_type=$2
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    IFS='.' read -r major minor patch <<< "$current_version"
    
    case "$bump_type" in
        major)
            echo "$((major + 1)).0.0"
            ;;
        minor)
            echo "${major}.$((minor + 1)).0"
            ;;
        patch)
            echo "${major}.${minor}.$((patch + 1))"
            ;;
        *)
            echo "Unknown bump type: $bump_type"
            exit 1
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∏–∑ .xcodeproj —Ñ–∞–π–ª–∞
get_current_version() {
    local project_file=$1
    
    # –ò—â–µ–º MARKETING_VERSION –≤ —Ñ–∞–π–ª–µ –∏ –±–µ—Ä–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
    local versions=$(grep "MARKETING_VERSION = " "$project_file" | sed 's/.*MARKETING_VERSION = \([0-9.]*\);.*/\1/')
    
    if [[ -z "$versions" ]]; then
        echo "Error: Could not find MARKETING_VERSION in $project_file" >&2
        exit 1
    fi
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é (–æ–±—ã—á–Ω–æ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞)
    local version=$(echo "$versions" | tail -1)
    
    echo "$version"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ .xcodeproj —Ñ–∞–π–ª–µ
update_version_in_project() {
    local project_file=$1
    local old_version=$2
    local new_version=$3
    
    echo "Updating $project_file: $old_version -> $new_version"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [[ ! -f "$project_file" ]]; then
        echo "Error: Project file $project_file does not exist!" >&2
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π
    if ! grep -q "MARKETING_VERSION = $old_version;" "$project_file"; then
        echo "Error: Could not find 'MARKETING_VERSION = $old_version;' in $project_file" >&2
        echo "Available MARKETING_VERSION lines:" >&2
        grep "MARKETING_VERSION = " "$project_file" >&2
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è sed
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s/MARKETING_VERSION = $old_version;/MARKETING_VERSION = $new_version;/g" "$project_file"
    else
        # Linux
        sed -i "s/MARKETING_VERSION = $old_version;/MARKETING_VERSION = $new_version;/g" "$project_file"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    if ! grep -q "MARKETING_VERSION = $new_version;" "$project_file"; then
        echo "Error: Version update failed! Could not find 'MARKETING_VERSION = $new_version;' after update" >&2
        return 1
    fi
    
    echo "‚úÖ Successfully updated version in $project_file"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –º–æ–¥—É–ª—å
should_update_module() {
    local module=$1
    local changed_modules=$2
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—É—Å—Ç–æ–π, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
    if [[ -z "$changed_modules" ]]; then
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–¥—É–ª—å –≤ —Å–ø–∏—Å–∫–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö
    for changed_module in $changed_modules; do
        if [[ "$module" == "$changed_module" ]] || [[ "$module" == *"$changed_module"* ]]; then
            return 0
        fi
    done
    
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–º –∏–∑ –ø–∞–ø–∫–∏ Themes
get_all_themes() {
    local themes=()
    
    # –ò—â–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤ Themes, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç .xcodeproj
    for theme_dir in Themes/*/; do
        if [[ -d "$theme_dir" ]]; then
            theme_name=$(basename "$theme_dir")
            project_file="${theme_dir}${theme_name}.xcodeproj/project.pbxproj"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [[ -f "$project_file" ]]; then
                themes+=("Themes/$theme_name")
            fi
        fi
    done
    
    echo "${themes[@]}"
}

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
ALL_THEMES=$(get_all_themes)
echo "Found themes: $ALL_THEMES"

# –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
MODULES=("SDDSComponents" "SDDSThemeCore" "SDDSDemoApp")
PROJECTS=("SDDSComponents/SDDSComponents.xcodeproj/project.pbxproj" "SDDSThemeBuilder/SDDSThemeBuilder.xcodeproj/project.pbxproj" "SDDSDemoApp/SDDSDemoApp.xcodeproj/project.pbxproj")

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –≤ –º–∞—Å—Å–∏–≤—ã
for theme in $ALL_THEMES; do
    theme_name=$(basename "$theme")
    project_file="${theme}/${theme_name}.xcodeproj/project.pbxproj"
    
    MODULES+=("$theme")
    PROJECTS+=("$project_file")
done

echo "Checking modules for updates..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
for project_file in "${PROJECTS[@]}"; do
    if [[ ! -f "$project_file" ]]; then
        echo "‚ùå Error: Project file $project_file does not exist!" >&2
        exit 1
    fi
done
echo "‚úÖ All project files exist"

# –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
for i in "${!MODULES[@]}"; do
    module=${MODULES[$i]}
    project_file=${PROJECTS[$i]}
    
    echo "üîç Checking $module at $project_file"
    
    if should_update_module "$module" "$CHANGED_MODULES"; then
        echo "‚úÖ Processing $module"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
        current_version=$(get_current_version "$project_file")
        echo "  Current version: $current_version"
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        new_version=$(bump_version "$current_version" "$BUMP_TYPE")
        echo "  New version: $new_version"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ –ø—Ä–æ–µ–∫—Ç–µ
        if ! update_version_in_project "$project_file" "$current_version" "$new_version"; then
            echo "‚ùå Failed to update version for $module"
            exit 1
        fi
    else
        echo "‚è≠Ô∏è Skipping $module (no changes detected)"
    fi
done

echo "Version bump completed successfully!" 