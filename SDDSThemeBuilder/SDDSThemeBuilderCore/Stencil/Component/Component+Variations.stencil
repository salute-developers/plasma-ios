import Foundation
import SwiftUI
import SDDSComponents
import SDDSThemeCore

{% for key, props in variations %}
public extension GeneralAppearanceVariation<{{ component }}, {{ appearance }}, {{ component }}Variation.{{ key }}> {
    {% for variationName, variation in props %}
    var {{ variationName | escapeSwiftKeyword }}: {{ variation.next }} {
        var size =  {{ component }}AnySize(size: appearance.size)
        {%- for property, value in variation.size %}
            {%- if property | generate_function %}
        size.{{ property | remove_func_keyword }}{{ value | insert_arguments }}
                {%- else %}
        size.{{ property }} = {{ value }}
            {%- endif %}
        {%- endfor %}

        var appearance = appearance
        appearance.size = size
        {%- for property, value in variation.appearance %}
        appearance.{{ property }} = {{ value }}
        {%- endfor %}
    
        return .init(
            name: "{{variation.chain}}",
            appearance: appearance
        )
    }
    {% endfor %}{% if variationViews[key] %}{%- for viewKey, view in variationViews[key] %}
    var {{ viewKey }}: AppearanceVariation<{{ appearance }}> {
        var appearance = appearance
        {%- for property, value in view.appearance %}
        appearance.{{ property }} = {{ value }}
        {%- endfor %}
        
        return .init(
            name: "{{viewKey}}",
            appearance: appearance
        )
    }
    {%- endfor %}
    var variation: Variation<{{ appearance }}> {
        .init(
            originalVariation: self,
            styles: [
            {%- for viewKey, view in variationViews[key] %}
                self.{{ viewKey }},
            {%- endfor %}
            ],
            name: name,
            appearance: appearance
        )
    }
    {% else %}{%- for viewKey, view in views %}
    var {{ viewKey }}: AppearanceVariation<{{ appearance }}> {
        return .init(
            name: "{{viewKey}}",
            appearance: appearance.{{ viewKey }}
        )
    }
    {%- endfor %}
    var variation: Variation<Appearance> {
        .init(
            originalVariation: self,
            styles: [
            {%- for viewKey, view in views %}
                self.{{ viewKey }},
            {%- endfor %}
            ],
            name: name,
            appearance: appearance
        )
    }
    {% endif %}
}
{% endfor %}

public extension ComponentAppearanceVariation<{{component}}, {{ appearance }}> {
    {%- for viewKey, view in views %}
    var {{ viewKey }}: AppearanceVariation<{{ appearance }}> {
        return .init(
            name: "{{viewKey}}",
            appearance: appearance.{{ viewKey }}
        )
    }
    {%- endfor %}
    var variation: Variation<Appearance> {
        .init(
            originalVariation: self,
            styles: [
            {%- for viewKey, view in views %}
                self.{{ viewKey }},
            {%- endfor %}
            ],
            name: name,
            appearance: appearance
        )
    }
}

private extension {{ appearance }} {
    {% for viewKey, view in views %}
    var {{ viewKey }}: {{ appearance }} {
        var appearance = self
        {%- for property, value in view.appearance %}
        appearance.{{ property }} = {{ value }}
        {%- endfor %}
        return appearance
    }
    {% endfor %}
}
