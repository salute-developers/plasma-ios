/* This file is code generated. */

import SwiftUI
import UIKit
import SDDSThemeCore

public extension GradientToken {
    {%- for key, values in json %}
    
    {% for gradient in values.dark %}
    {% ensure_value_exists gradient.kind %}
    {% if gradient.kind == "linear" %}
    {% ensure_value_exists gradient.locations %}
    {% ensure_value_exists gradient.colors %}
    {% ensure_value_exists gradient.angle %}
    {% for location in gradient.locations %}
    {% ensure_double_in_range location 0 1 %}
    {% endfor %}
    {% elif gradient.kind == "radial" %}
    {% ensure_value_exists gradient.locations %}
    {% ensure_value_exists gradient.colors %}
    {% ensure_value_exists gradient.centerX %}
    {% ensure_value_exists gradient.centerY %}
    {% ensure_value_exists gradient.startRadius %}
    {% ensure_value_exists gradient.endRadius %}
    {% for location in gradient.locations %}
    {% ensure_double_in_range location 0 1 %}
    {% endfor %}
    {% elif gradient.kind == "angular" %}
    {% ensure_value_exists gradient.locations %}
    {% ensure_value_exists gradient.colors %}
    {% ensure_value_exists gradient.startAngle %}
    {% ensure_value_exists gradient.endAngle %}
    {% ensure_value_exists gradient.centerX %}
    {% ensure_value_exists gradient.centerY %}
    {% for location in gradient.locations %}
    {% ensure_double_in_range location 0 1 %}
    {% endfor %}
    {% elif gradient.kind == "color" %}
    {% ensure_value_exists gradient.background %}
    {% endif %}
    {% endfor %}
    
    {% for gradient in values.light %}
    {% ensure_value_exists gradient.kind %}
    {% if gradient.kind == "linear" %}
    {% ensure_value_exists gradient.locations %}
    {% ensure_value_exists gradient.colors %}
    {% ensure_value_exists gradient.angle %}
    {% for location in gradient.locations %}
    {% ensure_double_in_range location 0 1 %}
    {% endfor %}
    {% elif gradient.kind == "radial" %}
    {% ensure_value_exists gradient.locations %}
    {% ensure_value_exists gradient.colors %}
    {% ensure_value_exists gradient.centerX %}
    {% ensure_value_exists gradient.centerY %}
    {% ensure_value_exists gradient.startRadius %}
    {% ensure_value_exists gradient.endRadius %}
    {% for location in gradient.locations %}
    {% ensure_double_in_range location 0 1 %}
    {% endfor %}
    {% elif gradient.kind == "angular" %}
    {% ensure_value_exists gradient.locations %}
    {% ensure_value_exists gradient.colors %}
    {% ensure_value_exists gradient.startAngle %}
    {% ensure_value_exists gradient.endAngle %}
    {% ensure_value_exists gradient.centerX %}
    {% ensure_value_exists gradient.centerY %}
    {% for location in gradient.locations %}
    {% ensure_double_in_range location 0 1 %}
    {% endfor %}
    {% elif gradient.kind == "color" %}
    {% ensure_value_exists gradient.background %}
    {% endif %}
    {% endfor %}
    
    static var {{ key }}: Self {
        GradientToken(
            description: "{{ key }}",
            darkGradients: [
                {%- for gradient in values.dark %}
                .{{ gradient.kind }}(
                    {%- if gradient.kind == "linear" %}
                    LinearGradient(
                        locations: [
                            {%- for location in gradient.locations %}
                            {{ location }}{% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        colors: [
                            {%- for color in gradient.colors %}
                            Color(UIColor(hex: "{{ color|ensure|ensure_valid_hex }}")){% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        angle: {{ gradient.angle|ensure_double_in_range:-360,360 }}
                    )
                    {%- elif gradient.kind == "radial" %}
                    RadialGradient(
                        locations: [
                            {%- for location in gradient.locations %}
                            {{ location }}{% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        colors: [
                            {%- for color in gradient.colors %}
                            Color(UIColor(hex: "{{ color|ensure|ensure_valid_hex }}")){% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        center: CGPoint(
                            x: {{ gradient.centerX|ensure_double_non_negative }},
                            y: {{ gradient.centerY|ensure_double_non_negative }}
                        ),
                        startRadius: {{ gradient.startRadius|ensure_double_non_negative }},
                        endRadius: {{ gradient.endRadius|ensure_double_non_negative }}
                    )
                    {%- elif gradient.kind == "angular" %}
                    AngularGradient(
                        locations: [
                            {%- for location in gradient.locations %}
                            {{ location }}{% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        colors: [
                            {%- for color in gradient.colors %}
                            Color(UIColor(hex: "{{ color|ensure|ensure_valid_hex }}")){% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        startAngle: {{ gradient.startAngle|ensure_double_in_range:-360,360 }},
                        endAngle: {{ gradient.endAngle|ensure_double_in_range:-360,360 }},
                        center: CGPoint(
                            x: {{ gradient.centerX|ensure_double_in_range:0,1 }},
                            y: {{ gradient.centerY|ensure_double_in_range:0,1 }}
                        )
                    )
                    {%- elif gradient.kind == "color" %}
                    PlainColor(
                        background: Color(UIColor(hex: "{{ gradient.background|ensure|ensure_valid_hex }}"))
                    )
                    {%- endif %}
                ){% if not forloop.last %}, {% endif %}
                {%- endfor %}
            ],
            lightGradients: [
                {%- for gradient in values.light %}
                .{{ gradient.kind }}(
                    {%- if gradient.kind == "linear" %}
                    LinearGradient(
                        locations: [
                            {%- for location in gradient.locations %}
                            {{ location }}{% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        colors: [
                            {%- for color in gradient.colors %}
                            Color(UIColor(hex: "{{ color|ensure|ensure_valid_hex }}")){% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        angle: {{ gradient.angle|ensure_double_in_range:-360,360 }}
                    )
                    {%- elif gradient.kind == "radial" %}
                    RadialGradient(
                        locations: [
                            {%- for location in gradient.locations %}
                            {{ location }}{% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        colors: [
                            {%- for color in gradient.colors %}
                            Color(UIColor(hex: "{{ color|ensure|ensure_valid_hex }}")){% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        center: CGPoint(
                            x: {{ gradient.centerX|ensure_double_non_negative }},
                            y: {{ gradient.centerY|ensure_double_non_negative }}
                        ),
                        startRadius: {{ gradient.startRadius|ensure_double_non_negative }},
                        endRadius: {{ gradient.endRadius|ensure_double_non_negative }}
                    )
                    {%- elif gradient.kind == "angular" %}
                    AngularGradient(
                        locations: [
                            {%- for location in gradient.locations %}
                            {{ location }}{% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        colors: [
                            {%- for color in gradient.colors %}
                            Color(UIColor(hex: "{{ color|ensure|ensure_valid_hex }}")){% if not forloop.last %}, {% endif %}
                            {%- endfor %}
                        ],
                        startAngle: {{ gradient.startAngle|ensure_double_in_range:-360,360 }},
                        endAngle: {{ gradient.endAngle|ensure_double_in_range:-360,360 }},
                        center: CGPoint(
                            x: {{ gradient.centerX|ensure_double_in_range:0,1 }},
                            y: {{ gradient.centerY|ensure_double_in_range:0,1 }}
                        )
                    )
                    {%- elif gradient.kind == "color" %}
                    PlainColor(
                        background: Color(UIColor(hex: "{{ gradient.background|ensure|ensure_valid_hex }}"))
                    )
                    {%- endif %}
                ){% if not forloop.last %}, {% endif %}
                {%- endfor %}
            ]
        )
    }
    {%- endfor %}
    
    static var tokens: [Self] = [
        {%- for key in json %}
        {{ key }},
        {%- endfor %}
    ]
}
