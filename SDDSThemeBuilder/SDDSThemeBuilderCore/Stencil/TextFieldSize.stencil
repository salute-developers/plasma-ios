
import SDDSComponents
import SDDSServTheme
import SDDSThemeCore
import Foundation
import SwiftUI

public enum TextFieldSize: String, TextFieldSizeConfiguration {
    {%- for sizeKey, sizeVariation in data %}
    case {{ sizeKey }}
    {%- endfor %}
    
    public var cornerRadius: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.shape.value | adjustedCornerRadius:sizeVariation.shape.adjustment }}
            {%- endfor %}
        }
    }
    
    public var titleBottomPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.titleBottomPadding }}
            {%- endfor %}
        }
    }
    
    public var titleInnerPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.titleInnerPadding }}
            {%- endfor %}
        }
    }
    
    public var textBeforeTrailingPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.textBeforeTrailingPadding }}
            {%- endfor %}
        }
    }
    
    public var textAfterLeadingPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.textAfterLeadingPadding }}
            {%- endfor %}
        }
    }
    
    public var boxLeadingPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.boxLeadingPadding }}
            {%- endfor %}
        }
    }
    
    public var boxTrailingPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.boxTrailingPadding }}
            {%- endfor %}
        }
    }
    
    public var captionTopPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.captionTopPadding }}
            {%- endfor %}
        }
    }
    
    public var optionalPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.optionalPadding }}
            {%- endfor %}
        }
    }
    
    public var iconPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.iconPadding }}
            {%- endfor %}
        }
    }
    
    public var iconActionPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.iconActionPadding }}
            {%- endfor %}
        }
    }
    
    public var fieldHeight: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.fieldHeight }}
            {%- endfor %}
        }
    }
    
    public var iconSize: CGSize {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return CGSize(width: {{ sizeVariation.iconSize.width }}, height: {{ sizeVariation.iconSize.height }})
            {%- endfor %}
        }
    }
    
    public var iconActionSize: CGSize {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return CGSize(width: {{ sizeVariation.iconActionSize.width }}, height: {{ sizeVariation.iconActionSize.height }})
            {%- endfor %}
        }
    }
    
    public var chipsPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.chipsPadding }}
            {%- endfor %}
        }
    }
    
    public var chipContainerHorizontalPadding: CGFloat {
        switch self {
            {%- for sizeKey, sizeVariation in data %}
        case .{{ sizeKey }}:
            return {{ sizeVariation.chipContainerHorizontalPadding }}
            {%- endfor %}
        }
    }
    
    public func indicatorOffset(labelPlacement: TextFieldLabelPlacement, requiredPlacement: TextFieldRequiredPlacement) -> CGPoint {
        switch labelPlacement {
        case .none:
            switch requiredPlacement {
            case .left:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGPoint(
                        x: {{ sizeVariation.indicatorOffsets[sizeKey]["required-start"].width | default: 0 }},
                        y: {{ sizeVariation.indicatorOffsets[sizeKey]["required-start"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            case .right:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGPoint(
                        x: {{ sizeVariation.indicatorOffsets[sizeKey]["required-end"].width | default: 0 }},
                        y: {{ sizeVariation.indicatorOffsets[sizeKey]["required-end"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            }
        case .inner:
            switch requiredPlacement {
            case .left:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGPoint(
                        x: {{ sizeVariation.indicatorOffsets["inner-label"]["required-start"].width | default: 0 }},
                        y: {{ sizeVariation.indicatorOffsets["inner-label"]["required-start"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            case .right:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGPoint(
                        x: {{ sizeVariation.indicatorOffsets["inner-label"]["required-end"].width | default: 0 }},
                        y: {{ sizeVariation.indicatorOffsets["inner-label"]["required-end"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            }
        case .outer:
            switch requiredPlacement {
            case .left:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGPoint(
                        x: {{ sizeVariation.indicatorOffsets["outer-label"]["required-start"].width | default: 0 }},
                        y: {{ sizeVariation.indicatorOffsets["outer-label"]["required-start"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            case .right:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGPoint(
                        x: {{ sizeVariation.indicatorOffsets["outer-label"]["required-end"].width | default: 0 }},
                        y: {{ sizeVariation.indicatorOffsets["outer-label"]["required-end"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            }
        }
    }
        
    public func indicatorSize(labelPlacement: TextFieldLabelPlacement, requiredPlacement: TextFieldRequiredPlacement) -> CGSize {
        switch labelPlacement {
        case .none:
            switch requiredPlacement {
            case .left:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGSize(
                        width: {{ sizeVariation.indicatorSizes[sizeKey]["required-start"].width | default: 0 }},
                        height: {{ sizeVariation.indicatorSizes[sizeKey]["required-start"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            case .right:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGSize(
                        width: {{ sizeVariation.indicatorSizes[sizeKey]["required-end"].width | default: 0 }},
                        height: {{ sizeVariation.indicatorSizes[sizeKey]["required-end"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            }
        case .inner:
            switch requiredPlacement {
            case .left:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGSize(
                        width: {{ sizeVariation.indicatorSizes["inner-label"]["required-start"].width | default: 0 }},
                        height: {{ sizeVariation.indicatorSizes["inner-label"]["required-start"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            case .right:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGSize(
                        width: {{ sizeVariation.indicatorSizes["inner-label"]["required-end"].width | default: 0 }},
                        height: {{ sizeVariation.indicatorSizes["inner-label"]["required-end"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            }
        case .outer:
            switch requiredPlacement {
            case .left:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGSize(
                        width: {{ sizeVariation.indicatorSizes["outer-label"]["required-start"].width | default: 0 }},
                        height: {{ sizeVariation.indicatorSizes["outer-label"]["required-start"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            case .right:
                switch self {
                    {%- for sizeKey, sizeVariation in data %}
                case .{{ sizeKey }}:
                    return CGSize(
                        width: {{ sizeVariation.indicatorSizes["outer-label"]["required-end"].width | default: 0 }},
                        height: {{ sizeVariation.indicatorSizes["outer-label"]["required-end"].height | default: 0 }}
                    )
                    {%- endfor %}
                }
            }
        }
    }
        

}
