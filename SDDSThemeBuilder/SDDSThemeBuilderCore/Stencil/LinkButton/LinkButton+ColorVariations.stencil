/* This file is code generated. */

import Foundation
import SDDSComponents
import SDDSThemeCore

public extension ButtonAppearanceVariation<LinkButton> {
    {% for variation, config in variations.color %}
    var {{ variation | camelCase | escapeSwiftKeyword }}: Self {
        .init(
            appearance: appearance.applyColorVariation(variation: LinkButton.{{ variation | camelCase | escapeSwiftKeyword }}.appearance)
        )
    }
    {% endfor %}
}

public extension LinkButton {
    {% for variation, config in variations.color %}
    static var {{ variation | camelCase | escapeSwiftKeyword }}: ButtonAppearanceVariation<LinkButton> {
        .init(
            name: "{{ variation | camelCase }}",
            appearance: ButtonAppearance(
                titleTypography: LinkButton.titleTypography,
                titleColor: ButtonColor(
                    defaultColor: .{{ config.contentColor.default | camelCase }},
                    highlightedColor: .{{ config.contentColor.states | findState:"pressed" | default:"clearColor" | camelCase }},
                    hoveredColor: .{{ config.contentColor.states | findState:"hovered" | default:"clearColor" | camelCase }}
                ),
                subtitleTypography: .default,
                subtitleColor: ButtonColor(
                    defaultColor: .clearColor,
                    highlightedColor: .clearColor,
                    hoveredColor: .clearColor
                ),
                iconColor: ButtonColor(
                    defaultColor: .{{ config.contentColor.default | camelCase }},
                    highlightedColor: .{{ config.contentColor.states | findState:"pressed" | default:"clearColor" | camelCase }},
                    hoveredColor: .{{ config.contentColor.states | findState:"hovered" | default:"clearColor" | camelCase }}
                ),
                spinnerColor: ButtonColor(
                    defaultColor: .{{ config.contentColor.default | camelCase }},
                    highlightedColor: .{{ config.contentColor.states | findState:"pressed" | default:"clearColor" | camelCase }},
                    hoveredColor: .{{ config.contentColor.states | findState:"hovered" | default:"clearColor" | camelCase }}
                ),
                backgroundColor: ButtonColor(
                    defaultColor: .{{ invariant.backgroundColor.default | camelCase | default:"clearColor" }},
                    highlightedColor: .clearColor,
                    hoveredColor: .clearColor
                ),
                disabledAlpha: 0.4,
                loadingAlpha: {{ invariant.loadingAlpha | default:0 }}
            )
        )
    }
    {% endfor %}
    
    static var all: [ButtonAppearanceVariation<LinkButton>] {
        [
            {% for variation, config in variations.color %}
            LinkButton.{{ variation | camelCase | escapeSwiftKeyword }}{% if not forloop.last %},{% endif %}
            {% endfor %}
        ]
    }
}
